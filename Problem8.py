# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
# What is the value of this product?
# Done in 3 ms...


a = '73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694' \
    '78851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096' \
    '32952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276' \
    '61428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987' \
    '97908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771' \
    '16705560136048395864467063244157221553975369781797784617406495514929086256932197846862248283' \
    '97224137565705605749026140797296865241453510047482166370484403199890008895243450658541227588' \
    '66688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128' \
    '83142607690042242190226710556263211111093705442175069416589604080719840385096245544436298123' \
    '09878799272442849091888458015616609791913387549920052406368991256071760605886116467109405077' \
    '54100225698315520005593572972571636269561882670428252483600823257530420752963450'


def multiply_array(array):
    r = 1
    for i in array:
        r *= i
    return r


def sum_of_the_product(long_string, adjacent_digits):
    x = []
    max_value = 0
    for i in long_string:
        x.append(int(i))

    for i in range(len(long_string) - adjacent_digits):
        multi = multiply_array(x[i:i + adjacent_digits])

        if max_value < multi:
            max_value = multi
    print(max_value)


if __name__ == '__main__':
    sum_of_the_product(a, 13)
